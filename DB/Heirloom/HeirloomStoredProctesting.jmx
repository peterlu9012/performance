<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="dbsampleroutput" elementType="Argument">
            <stringProp name="Argument.name">dbsampleroutput</stringProp>
            <stringProp name="Argument.value">C:\Data\Jmeter_Scripts\data\db-enrollment-responsetimes.csv</stringProp>
            <stringProp name="Argument.desc">db tests sampler output</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="enrollmentinfo" elementType="Argument">
            <stringProp name="Argument.name">enrollmentinfo</stringProp>
            <stringProp name="Argument.value">C:\Data\Jmeter_Scripts\data\db-enrollment-data.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userpwd" elementType="Argument">
            <stringProp name="Argument.name">userpwd</stringProp>
            <stringProp name="Argument.value">test1234</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ChangedByApplication" elementType="Argument">
            <stringProp name="Argument.name">ChangedByApplication</stringProp>
            <stringProp name="Argument.value">JMT</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ChangedByUser" elementType="Argument">
            <stringProp name="Argument.name">ChangedByUser</stringProp>
            <stringProp name="Argument.value">JMTTest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AddressLine1" elementType="Argument">
            <stringProp name="Argument.name">AddressLine1</stringProp>
            <stringProp name="Argument.value">200 Catherine St Ste 101</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PostalCode" elementType="Argument">
            <stringProp name="Argument.name">PostalCode</stringProp>
            <stringProp name="Argument.value">K2P 2K9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Region" elementType="Argument">
            <stringProp name="Argument.name">Region</stringProp>
            <stringProp name="Argument.value">ON</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Locale" elementType="Argument">
            <stringProp name="Argument.name">Locale</stringProp>
            <stringProp name="Argument.value">OTTAWA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="culture" elementType="Argument">
            <stringProp name="Argument.name">culture</stringProp>
            <stringProp name="Argument.value">en-CA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AddressProfileName" elementType="Argument">
            <stringProp name="Argument.name">AddressProfileName</stringProp>
            <stringProp name="Argument.value">JMT-Test-Address</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CountryCode" elementType="Argument">
            <stringProp name="Argument.name">CountryCode</stringProp>
            <stringProp name="Argument.value">CA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProfileName" elementType="Argument">
            <stringProp name="Argument.name">ProfileName</stringProp>
            <stringProp name="Argument.value">JMT-Test-PaymentProfile</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCNum" elementType="Argument">
            <stringProp name="Argument.name">CCNum</stringProp>
            <stringProp name="Argument.value">4111111111111111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AccountIDx" elementType="Argument">
            <stringProp name="Argument.name">AccountIDx</stringProp>
            <stringProp name="Argument.value">935381</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PeriodIDx" elementType="Argument">
            <stringProp name="Argument.name">PeriodIDx</stringProp>
            <stringProp name="Argument.value">201410</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PageSize" elementType="Argument">
            <stringProp name="Argument.name">PageSize</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SponsorID" elementType="Argument">
            <stringProp name="Argument.name">SponsorID</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="TST2" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://172.16.26.88:1433;DatabaseName=RFOperations</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">perftest</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">perftest</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="TST3" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://10.223.80.75:1433;DatabaseName=RFOperations</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">perftest</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">perftest</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - TST1" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://10.178.12.109:1433;DatabaseName=RFOperations</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">perftest</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">perftest</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - CommPulse" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://172.16.15.105:1433;DatabaseName=RFOperations</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">perftest</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">perftest</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - Dev RFL DB" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://10.223.145.164:1433;DatabaseName=RodanFieldsLive</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">CORprod1app$</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">CORPORATE</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - RFL" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://172.16.15.103:1433;DatabaseName=RodanFieldsLive</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">perftest</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">perftest</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - STAGE2" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://172.16.15.102:1433;DatabaseName=RFOperations</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">perftest</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">perftest</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - STAGE1" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://172.16.15.210:1433;DatabaseName=Commissions</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">perftest</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">perftest</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - Perf Prod RFO" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://172.16.15.113:6666;DatabaseName=RFOperations</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">M9XTEbLFh</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">HybrisSTG3Admin</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - Hybrisdb" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">500000</stringProp>
        <stringProp name="dataSource">stageDB</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://172.16.15.13:1432;DatabaseName=Hybris</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">M9XTEbLFh</stringProp>
        <stringProp name="poolMax">1500</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">HybrisSTG3Admin</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PulseIDs - CSV" enabled="false">
        <stringProp name="filename">C:\Users\smccabe\workspace\performancetesting\Test_data\pulseids.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">sAcctID</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AccountPeriods.csv - CSV FILE" enabled="true">
        <stringProp name="filename">C:\Users\smccabe\workspace\performancetesting\Test_data\AccountPeriods.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">AccountID,PeriodID</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AcctAddressIDs_TypeIDs - CSV FILE" enabled="true">
        <stringProp name="filename">C:\Users\smccabe\workspace\performancetesting\Test_data\AccountAddressIDsTypes.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">sAcctAddrID,sAcctTypeID</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Autoship Data" enabled="true">
        <stringProp name="filename">C:\Users\smccabe\workspace\performancetesting\Test_data\AutoshipNamesSchedIDs.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">sFirst,sLast,sID</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Geocoding Data" enabled="true">
        <stringProp name="filename">C:\Users\smccabe\workspace\performancetesting\Test_data\geolocations.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">sLat,sLong,sAcctType</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="sURL" elementType="Argument">
            <stringProp name="Argument.name">sURL</stringProp>
            <stringProp name="Argument.value">${pws}${domain}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sShowPC" elementType="Argument">
            <stringProp name="Argument.name">sShowPC</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sNonEC" elementType="Argument">
            <stringProp name="Argument.name">sNonEC</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SponsorIDs" enabled="true">
        <stringProp name="filename">C:\Users\smccabe\workspace\performancetesting\Test_data\sponsorIDs.txt</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">sID</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DB Thread Group - Enrollment Procs" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(Users,5)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(Rampup,10)}</stringProp>
        <longProp name="ThreadGroup.start_time">1417026856000</longProp>
        <longProp name="ThreadGroup.end_time">1417026856000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(Duration,300)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
        </ConstantTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_Accounts_SelectByNameOrId" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">DECLARE	@return_value int,
		@TotalCount int,
		@AccointId bigint

EXEC	@return_value = [RFO_Accounts].[usp_Accounts_SelectByNameOrId]
		@NameOrId = N&apos;${sponsorname}&apos;,
		@TotalCount = @TotalCount OUTPUT


</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout">60</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable">results</stringProp>
          <stringProp name="variableNames">SponsorId</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String srand;
int len;
String AB = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;
String SSN = &quot;1234567890&quot;;
String A = &quot;abcdefghijklmnopqrstuvwxyz&quot;;

static Random rnd = new Random();

// Useremail
len=8;
StringBuilder sb = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 sb.append( AB.charAt( rnd.nextInt(AB.length()) ) );
 srand = sb.toString();

 vars.put(&quot;useremail&quot;, srand+&quot;@mailanatorjmt.com&quot;);

 // SSN
 len=9;
 sb = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 sb.append( SSN.charAt( rnd.nextInt(SSN.length()) ) );
 srand = sb.toString();

 vars.put(&quot;ssn&quot;, srand);

 // First name
len=12;
StringBuilder first = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 first.append( A.charAt( rnd.nextInt(A.length()) ) );
 
 vars.put(&quot;enrl_fname&quot;, first.toString());
 //log.info(&quot;First Name: &quot; + vars.get(&quot;enrl_fname&quot;));

// Last name
 StringBuilder last = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 last.append( A.charAt( rnd.nextInt(A.length()) ) );
 
 vars.put(&quot;enrl_lname&quot;, last.toString());
 //log.info(&quot;Last Name: &quot; + vars.get(&quot;enrl_lname&quot;));

 //Enroll first-last name combo for PWS suffix
 fname = vars.get(&quot;enrl_fname&quot;);
 lname = vars.get(&quot;enrl_lname&quot;);
 //log.info(&quot;FName: &quot; + fname + &quot; LName: &quot; + lname);
 flname = fname.charAt(0) + lname;
 vars.put(&quot;pwsprefix&quot;, flname);

 // Sponsor
 if(vars.get(&quot;sponsorname&quot;)==null) {
 	vars.put(&quot;sponsorname&quot;, &quot;jane doe&quot;);
 	//vars.put(&quot;sponsor&quot;,&quot;Random+Namefortesting&quot;);
 }
//siteid
 len=9;
 sb = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 sb.append( SSN.charAt( rnd.nextInt(SSN.length()) ) );
 srand = sb.toString();
 vars.put(&quot;siteId&quot;, srand);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();

//modifying code to keep horizontal tree
ArrayList result = vars.getObject(&quot;results&quot;);
for (HashMap table : result) {
    for (Object column : table.keySet()) {
        log.info(column + &quot;=&quot; + table.get(column));
        if(new String(column).compareTo(new String(&quot;AccountID&quot;)) == 0) {
        	vars.put(&quot;SponsorId&quot;,  Long.toString(table.get(column)));
        	break;
        }
    }
}

log.info(&quot;**** SponsorId set to: **** &quot; + vars.get(&quot;SponsorId&quot;));</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_ValidateAccountEmailSsn - Email Check" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">DECLARE	@return_value int

EXEC	@return_value = [RFO_Accounts].[usp_ValidateAccountEmailSsn]
		@AccountId = NULL,
		@EmailToCheck = N&apos;${useremail}&apos;,
		@CountryCode = N&apos;${CountryCode}&apos;,
		@SsnToCheck = NULL,
		@UserNameToCheck = NULL



</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String srand;
int len;
String AB = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;
String SSN = &quot;1234567890&quot;;
String A = &quot;abcdefghijklmnopqrstuvwxyz&quot;;

static Random rnd = new Random();

// Useremail
len=8;
StringBuilder sb = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 sb.append( AB.charAt( rnd.nextInt(AB.length()) ) );
 srand = sb.toString();

 vars.put(&quot;useremail&quot;, srand+&quot;@mailanatorjmt.com&quot;);

 // SSN
 len=9;
 sb = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 sb.append( SSN.charAt( rnd.nextInt(SSN.length()) ) );
 srand = sb.toString();

 vars.put(&quot;ssn&quot;, srand);

 // First name
len=12;
StringBuilder first = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 first.append( A.charAt( rnd.nextInt(A.length()) ) );
 
 vars.put(&quot;enrl_fname&quot;, first.toString());
 //log.info(&quot;First Name: &quot; + vars.get(&quot;enrl_fname&quot;));

// Last name
 StringBuilder last = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 last.append( A.charAt( rnd.nextInt(A.length()) ) );
 
 vars.put(&quot;enrl_lname&quot;, last.toString());
 //log.info(&quot;Last Name: &quot; + vars.get(&quot;enrl_lname&quot;));

 //Enroll first-last name combo for PWS suffix
 fname = vars.get(&quot;enrl_fname&quot;);
 lname = vars.get(&quot;enrl_lname&quot;);
 //log.info(&quot;FName: &quot; + fname + &quot; LName: &quot; + lname);
 flname = fname.charAt(0) + lname;
 vars.put(&quot;pwsprefix&quot;, flname);

 // Sponsor
 if(vars.get(&quot;sponsorname&quot;)==null) {
 	vars.put(&quot;sponsorname&quot;, &quot;jane doe&quot;);
 	//vars.put(&quot;sponsor&quot;,&quot;Random+Namefortesting&quot;);
 }
//siteid
 len=9;
 sb = new StringBuilder( len );
for( int i = 0; i &lt; len; i++ ) 
 sb.append( SSN.charAt( rnd.nextInt(SSN.length()) ) );
 srand = sb.toString();
 vars.put(&quot;siteId&quot;, srand);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_ValidateAccountEmailSsn - SSN Check" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">DECLARE	@return_value int

EXEC	@return_value = [RFO_Accounts].[usp_ValidateAccountEmailSsn]
		@AccountId = NULL,
		@EmailToCheck = NULL,
		@CountryCode = N&apos;${CountryCode}&apos;,
		@SsnToCheck = N&apos;${ssn}&apos;,
		@UserNameToCheck = NULL




</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_Site_SelectByAccountPrefix" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">DECLARE	@return_value int

EXEC	@return_value = [RFO_Accounts].[usp_Site_SelectByAccountPrefix]
		@SitePrefix = N&apos;${pwsprefix}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_Account_Upsert" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">declare @p1 bigint
declare @p24 bigint
set @p24=NULL
declare @p32 int
set @p32=NULL
declare @p33 nvarchar(100)
set @p33=NULL
exec [RFO_Accounts].[usp_Account_Upsert] @AccountID=@p1 output,
@AccountStatusCode=N&apos;1&apos;,
@StatusChangeReasonCode=N&apos;37&apos;,
@CountryCode=N&apos;CA&apos;,
@CurrencyCode=N&apos;CAD&apos;,
@TimeZoneCode=N&apos;30&apos;,
@LanguageCode=N&apos;EN&apos;,
@AccountTypeCode=N&apos;1&apos;,
@ChangedByApplication=N&apos;${ChangedByApplication}&apos;,
@ChangedByUser=N&apos;${ChangedByUser}&apos;,
--@SponsorId=&apos;${SponsorId_1}&apos;,
@SponsorId=&apos;521877&apos;,
@EnrollerId=null,
@EnrollmentDate=&apos;2014-12-30 13:00:00&apos;,
@SoftTerminationDate=&apos;1900-01-01 00:00:00&apos;,
@HardTerminationDate=&apos;1900-01-01 00:00:00&apos;,
@Active=1,
@IsTaxExempt=false,
@IsBusinessEntity=NULL,@LastRenewalDate=&apos;1900-01-01 00:00:00&apos;,@CoApplicant=N&apos;{NULL}&apos;,
@LastAutoAssignmenDate=&apos;1900-01-01 00:00:00&apos;,@DisplayTaxNumber=N&apos;${ssn}&apos;,@SecuredTaxNumber=N&apos;${ssn}&apos;,
@AccountContactId=@p24 output,
@FirstName=N&apos;${enrl_fname}&apos;,
@MiddleNAme=NULL,
@LastName=N&apos;${enrl_lname}&apos;,@LegalName=N&apos;{NULL}&apos;,@NickName=N&apos;{NULL}&apos;,@GenderId=1,@Birthday=&apos;1900-01-01 00:00:00&apos;,
@RowsAffected=@p32 output,@AccountNumber=@p33 output
select @p1 as AccountId, @p33 as AccountNumber, @p24 as AccountContactId, @p32 as RowsAffected</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable">results</stringProp>
          <stringProp name="variableNames">AccountId</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();

ArrayList result = vars.getObject(&quot;results&quot;);
for (HashMap table : result) {
    for (Object column : table.keySet()) {
        log.info(column + &quot;=&quot; + table.get(column));
        if(new String(column).compareTo(new String(&quot;AccountId&quot;)) == 0) {
        	vars.put(&quot;AccountId&quot;,  Long.toString(table.get(column)));
        }
    }
}

log.info(&quot;**** AccountId set to: **** &quot; + vars.get(&quot;AccountId&quot;));</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_EmailAddress_Upsert" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">declare @p11 bigint
set @p11=NULL
declare @p12 int
set @p12=NULL
exec [RFO_Accounts].[usp_EmailAddress_Upsert] @AccountEmailID=NULL,
@AccountContactTypeCode=N&apos;2&apos;,
@EmailAddressId=NULL,
@AccountID=${AccountId_1},
@EmailProfileName=N&apos;EmailProfileName&apos;,
@EmailAddress=N&apos;${useremail}&apos;,@EffectiveDate=&apos;2014-10-10 00:00:00&apos;,@IsDefault=1,
@ChangedByApplication=N&apos;${ChangedByApplication}&apos;,@ChangedByUser=N&apos;${ChangedByUser}&apos;,@Pkey=@p11 output,@RecordCount=@p12 output
select @p11, @p12</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable">results</stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();

log.info(&quot;*** User Email: ***  &quot; + vars.get(&quot;useremail&quot;));</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_Account_Get" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">DECLARE	@return_value int

EXEC	@return_value = [RFO_Accounts].[usp_Account_Get]
		@AccountId = NULL,
		@EmailAddress = N&apos;${useremail}&apos;,
		@UserName = NULL,
		@SecuredTaxNumber = NULL

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_AccountSecurity_Upsert" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">declare @p4 bigint
set @p4=NULL
declare @p7 int
set @p7=NULL
exec [Security].[AccountSecurity_Upsert] 
@Username=N&apos;${useremail}&apos;,
@Password=N&apos;${userpwd}&apos;,
@AccountID=${AccountId_1},@Pkey=@p4 output,@ChangedByApplication=N&apos;JMT&apos;,@ChangedByUser=N&apos;JMTTest&apos;,@recordcount=@p7 output
select @p4, @p7
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_AccountPhone_Upsert" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">declare @p13 int
set @p13=NULL
declare @p14 bigint
set @p14=NULL
exec [RFO_Accounts].[usp_AccountPhone_Upsert] 
@AccountID=${AccountId_1},
@PhoneID=null,@PhoneTypeID=null,
@PhoneProfileName=N&apos;PhoneProfile-JMT&apos;,@CountryCode=N&apos;CA&apos;,@AreaCode=N&apos;408&apos;,
@Number=N&apos;4085555555&apos;,@PhoneNumberRaw=N&apos;4085555555&apos;,@PhoneNumberFormatted=N&apos;40855555555&apos;,@IsDefault=1,
@ChangedByApplication=N&apos;{ChangedByApplication}&apos;,@ChangedByUser=N&apos;{ChangedByUser}&apos;,@recordcount=@p13 output,@Pkey=@p14 output


</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_FullEnrollments_Upsert" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">declare @p14 int
set @p14=NULL
exec [RFO_Accounts].[usp_FullEnrollments_Upsert] 
@AccountID=${AccountId_1},@StartEnrollmentTypeCode=N&apos;2&apos;,@StartSourceTypeCode=N&apos;3&apos;,
@StartDeviceTypeCode=N&apos;5&apos;,@EndEnrollmentTypeCode=N&apos;11&apos;,@EndDeviceTypeCode=N&apos;12&apos;,
@SponsorSearchTypeCode=N&apos;18&apos;,@CRPShipDateCode=NULL,

@ChangedByApplication=N&apos;${ChangedByApplication}&apos;,
@ChangeByUser=N&apos;{ChangeByUser}&apos;,
@RecordCount=@p14 output

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_AccountNotes_UpsertSF" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">declare @p10 bigint
set @p10=NULL
declare @p11 int
set @p11=NULL
exec [RFO_Accounts].[AccountNotes_UpsertSF] 
@AccountNoteID=null,@AccountID=${AccountId_1},@Notes=N&apos;JMT HelloTest&apos;,@EffectiveDate=&apos;2014-12-29 18:59:50.460&apos;,
@ChangedByApplication=N&apos;{ChangedByApplication}&apos;,@ChangedByUser=N&apos;{ChangedByUser}&apos;,
@ChannelTypeId=null,@ReasonTypeId=null,@DetailTypeId=null,
@Pkey=@p10 output,@recordcount=@p11 output
select @p10, @p11
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_AccountAddresses_Upsert - Shipping" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">declare @p21 int
set @p21=NULL
declare @p22 bigint
set @p22=NULL
exec [RFO_Accounts].[usp_AccountAddresses_Upsert] 
@AccountID=${AccountId_1},@AccountContactTypeCode=N&apos;1&apos;,@AddressID=null,
@AddressTypeCode=N&apos;1&apos;,@AddressProfileName=N&apos;${AddressProfileName}&apos;,
@AddressLine1=N&apos;${AddressLine1}&apos;,@AddressLine2=N&apos;{NULL}&apos;,@AddressLine3=N&apos;{NULL}&apos;,
@AddressLine4=N&apos;{NULL}&apos;,@AddressLine5=N&apos;{NULL}&apos;,@PostalCode=N&apos;${PostalCode}&apos;,@Locale=N&apos;${Locale}&apos;,
@SubRegion=N&apos;{NULL}&apos;,@Region=N&apos;${Region}&apos;,@CountryCode=N&apos;${CountryCode}&apos;,
@IsDefault=&apos;1&apos;,@Latitude=null,@Longitude=null,
@ChangedByApplication=N&apos;${ChangedByApplication}&apos;,@ChangedByUser=N&apos;${ChangedByUser}&apos;,
@RecordCount=@p21 output,@Pkey=@p22 output
select @p21, @p22 as AddressId</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable">results</stringProp>
          <stringProp name="variableNames">ShippingAddressId</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();

ArrayList result = vars.getObject(&quot;results&quot;);
for (HashMap table : result) {
    for (Object column : table.keySet()) {
        log.info(column + &quot;=&quot; + table.get(column));
        if(new String(column).compareTo(new String(&quot;AddressId&quot;)) == 0) {
        	vars.put(&quot;ShippingAddressId&quot;,  Long.toString(table.get(column)));
        }
    }
}
log.info(&quot;**** Shipping AddressID set to: ****  &quot; + vars.get(&quot;ShippingAddressId&quot;));

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_AccountAddresses_Upsert - Billing" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">declare @p21 int
set @p21=NULL
declare @p22 bigint
set @p22=NULL
exec [RFO_Accounts].[usp_AccountAddresses_Upsert] 
@AccountID=${AccountId_1},@AccountContactTypeCode=N&apos;1&apos;,@AddressID=null,
@AddressTypeCode=N&apos;2&apos;,@AddressProfileName=N&apos;${AddressProfileName}&apos;,
@AddressLine1=N&apos;${AddressLine1}&apos;,@AddressLine2=N&apos;{NULL}&apos;,@AddressLine3=N&apos;{NULL}&apos;,
@AddressLine4=N&apos;{NULL}&apos;,@AddressLine5=N&apos;{NULL}&apos;,@PostalCode=N&apos;${PostalCode}&apos;,@Locale=N&apos;${Locale}&apos;,
@SubRegion=N&apos;{NULL}&apos;,@Region=N&apos;${Region}&apos;,@CountryCode=N&apos;${CountryCode}&apos;,
@IsDefault=&apos;1&apos;,@Latitude=null,@Longitude=null,
@ChangedByApplication=N&apos;${ChangedByApplication}&apos;,@ChangedByUser=N&apos;${ChangedByUser}&apos;,
@RecordCount=@p21 output,@Pkey=@p22 output
select @p21, @p22 as AddressId</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable">results</stringProp>
          <stringProp name="variableNames">BillingAddressId</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();

ArrayList result = vars.getObject(&quot;results&quot;);
for (HashMap table : result) {
    for (Object column : table.keySet()) {
        log.info(column + &quot;=&quot; + table.get(column));
        if(new String(column).compareTo(new String(&quot;AddressId&quot;)) == 0) {
        	vars.put(&quot;BillingAddressId&quot;,  Long.toString(table.get(column)));
        }
    }
}
log.info(&quot;**** Billing AddressID set to: ****  &quot; + vars.get(&quot;BillingAddressId&quot;));

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_AccountAddress_SelectByAddressId - Shipping" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">EXEC [RFO_Accounts].[usp_AccountAddress_SelectByAddressId] @AddressId=N&apos;${ShippingAddressId_1}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_AccountAddress_SelectByAddressId - Billing" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">EXEC [RFO_Accounts].[usp_AccountAddress_SelectByAddressId] @AddressId=N&apos;${BillingAddressId_1}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_AccountPaymentProfile_Upsert" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">declare @p14 int
set @p14=NULL
declare @p15 bigint
set @p15=NULL
exec [RFO_Accounts].[usp_AccountPaymentProfile_Upsert] 
@PaymentProfileID=null,@AccountID=${AccountId_1},@BillingAddressID=${BillingAddressId_1},
@PaymentTypeCode=N&apos;1&apos;,@ProfileName=N&apos;${ProfileName}&apos;,@IsDefault=true,@VendorCode=N&apos;2&apos;,
@NameOnCard=N&apos;jmt test user&apos;,@DisplayNumber=N&apos;${CCNum}&apos;,@ExpMonth=-12,@ExpYear=2016,
@ChangedByApplication=N&apos;${ChangedByApplication}&apos;,@ChangedByUser=N&apos;${ChangedByUser}&apos;,
@RecordCount=@p14 output,@Pkey=@p15 output
select @p14, @p15 as PaymentProfileId</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable">results</stringProp>
          <stringProp name="variableNames">PaymentProfileId</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();

ArrayList result = vars.getObject(&quot;results&quot;);
for (HashMap table : result) {
    for (Object column : table.keySet()) {
        log.info(column + &quot;=&quot; + table.get(column));
        if(new String(column).compareTo(new String(&quot;PaymentProfileId&quot;)) == 0) {
        	vars.put(&quot;PaymentProfileId&quot;,  Long.toString(table.get(column)));
        }
    }
}
log.info(&quot;**** PaymentProfileId set to: ****  &quot; + vars.get(&quot;PaymentProfileId&quot;));


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_PaymentProfile_SelectByPaymentProfileID" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="query">EXEC [RFO_Accounts].usp_PaymentProfile_SelectByPaymentProfileID @PaymentProfileID=N&apos;${PaymentProfileId_1}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String dbout = vars.get(&quot;dbsampleroutput&quot;);
f = new FileWriter(dbout, true);
f.write(prev.getSampleLabel() + &quot;,&quot; + String.valueOf(prev.getLatency()) + &quot;,&quot; + String.valueOf(prev.getTime()) + &quot;,&quot; + String.valueOf(prev.getTime()-prev.getLatency())+&quot;\n&quot;);
f.flush();
f.close();

String enrlinfo = vars.get(&quot;enrollmentinfo&quot;);
f = new FileWriter(enrlinfo, true);
f.write(vars.get(&quot;sponsorname&quot;) + &quot;,&quot; + vars.get(&quot;SponsorId&quot;) + &quot;,&quot; + vars.get(&quot;useremail&quot;) + &quot;,&quot; + vars.get(&quot;enrl_fname&quot;) + &quot;,&quot; + vars.get(&quot;enrl_lname&quot;) + &quot;,&quot; + vars.get(&quot;AccountId&quot;) + &quot;\n&quot;);
f.flush();
f.close();

// Set sponsor for next iteration Removing vertical tree. Adding all users to Jane Doe to avoid tree depth limitation issue
//vars.put(&quot;sponsorname&quot;, vars.get(&quot;enrl_fname&quot;) + &quot; &quot; + vars.get(&quot;enrl_lname&quot;));

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-934123542">Output variables by position</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_SaveSiteURL" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE       @return_value int,
              @Pkey bigint,
              @recordcount int
 
EXEC   @return_value = [Hybris].[Sites_Upsert]     
		    @SiteID = ${siteId},      
              @AccountID = ${AccountId_1},
              @SitePrefix = N&apos;${pwsprefix}&apos;,
              @StartDate = N&apos;2014-10-10 00:00:00&apos;,
              @ChangedByApplication = N&apos;${ChangedByApplication}&apos;,
              @ChangedByUser = N&apos;${ChangedByUser}&apos;,
              @Active = 1,
              @Pkey = @Pkey OUTPUT,
              @recordcount = @recordcount OUTPUT
              select @recordcount</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">pws.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">sURL</stringProp>
      </CSVDataSet>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="645048266">
            <stringProp name="48625">100</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49586">200</stringProp>
            <stringProp name="48687">120</stringProp>
            <stringProp name="1567">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_autoship_select_by_FIRST AND LAST name_and_scheduleID" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @ScheduleID int
DECLARE @Name nvarchar(100)

-- TODO: Set parameter values here.

EXECUTE @RC = [RodanFieldsLive].[dbo].[usp_autoship_select_by_name_and_scheduleID] 
   @ScheduleID=N&apos;${sID}&apos;
  ,@Name=N&apos;${sFirst} ${sLast}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="3635">sF</stringProp>
              <stringProp name="3641">sL</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-277433139">
                <stringProp name="-1296886686">${sFirst} ${sLast}</stringProp>
                <stringProp name="-823990389">${sLast}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_autoship - LAST_name_and_scheduleID" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @ScheduleID int
DECLARE @Name nvarchar(100)

-- TODO: Set parameter values here.

EXECUTE @RC = [RodanFieldsLive].[dbo].[usp_autoship_select_by_name_and_scheduleID] 
   @ScheduleID=N&apos;${sID}&apos;
  ,@Name=N&apos;${sLast}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="3635">sF</stringProp>
              <stringProp name="3641">sL</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-277433139">
                <stringProp name="-1296886686">${sFirst} ${sLast}</stringProp>
                <stringProp name="-823990389">${sLast}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_accountgeocoding_assign_lead" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @AccountAddressID int
DECLARE @AccountTypeID int

-- TODO: Set parameter values here.


EXECUTE @RC = [RodanFieldsLive].[dbo].[usp_accountgeocoding_assign_lead] 
   @AccountAddressID=N&apos;${sAcctAddrID}&apos;
  ,@AccountTypeID=N&apos;${sAcctTypeID}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RFL Stored Procs Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">50</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470161123000</longProp>
        <longProp name="ThreadGroup.end_time">1470161123000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_site_select_by_url" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE	@return_value int

EXEC @return_value =[RodanFieldsLive].[dbo].[usp_site_select_by_url]
		@URL = N&apos;${pws}.myrfostg2.com&apos;
		</stringProp>
          <stringProp name="queryArguments">${pws}${domain}</stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">sURL</stringProp>
          <stringProp name="resultVariable">results</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_autoship_select_by_FIRST AND LAST name_and_scheduleID" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @ScheduleID int
DECLARE @Name nvarchar(100)

-- TODO: Set parameter values here.

EXECUTE @RC = [RodanFieldsLive].[dbo].[usp_autoship_select_by_name_and_scheduleID] 
   @ScheduleID=N&apos;${sID}&apos;
  ,@Name=N&apos;${sFirst} ${sLast}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="3635">sF</stringProp>
              <stringProp name="3641">sL</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-277433139">
                <stringProp name="-1296886686">${sFirst} ${sLast}</stringProp>
                <stringProp name="-823990389">${sLast}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_autoship - LAST_name_and_scheduleID" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @ScheduleID int
DECLARE @Name nvarchar(100)

-- TODO: Set parameter values here.

EXECUTE @RC = [RodanFieldsLive].[dbo].[usp_autoship_select_by_name_and_scheduleID] 
   @ScheduleID=N&apos;${sID}&apos;
  ,@Name=N&apos;${sLast}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="3635">sF</stringProp>
              <stringProp name="3641">sL</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-277433139">
                <stringProp name="-1296886686">${sFirst} ${sLast}</stringProp>
                <stringProp name="-823990389">${sLast}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_accountgeocoding_assign_lead" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @AccountAddressID int
DECLARE @AccountTypeID int

-- TODO: Set parameter values here.


EXECUTE @RC = [RodanFieldsLive].[dbo].[usp_accountgeocoding_assign_lead] 
   @AccountAddressID=N&apos;${sAcctAddrID}&apos;
  ,@AccountTypeID=N&apos;${sAcctTypeID}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="usp_consultant_locator" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @AccountAddressID int
DECLARE @AccountTypeID int

-- TODO: Set parameter values here.


EXECUTE @RC = [RodanFieldsLive].[dbo].[usp_consultant_locator] 
	@latitude=N&apos;${sLat}&apos;,
	@longitude=N&apos;${sLong}&apos;,
	@AccountTypeID=N&apos;${sAcctType}&apos;,
	@rowcount=N&apos;1&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pulse Stored Procs Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1469030179000</longProp>
        <longProp name="ThreadGroup.end_time">1469030179000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">29000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="00 - pulse.uspFlatPerformanceLineage" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @ScheduleID int
DECLARE @Name nvarchar(100)

-- TODO: Set parameter values here.

EXECUTE @RC = [Commissions_Pulse].[pulse].[uspFlatPerformanceLineage] 
   @SponsorID=N&apos;${sID}&apos;
  ,@ShowPC=N&apos;${sShowPC}&apos;
  ,@ShowNonEC=N&apos;${sNonEC}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="01 - pulse.uspFlatPerformanceLineage_GJ2" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @ScheduleID int
DECLARE @Name nvarchar(100)

-- TODO: Set parameter values here.

EXECUTE @RC = [Commissions_Pulse].[pulse].[uspFlatPerformanceLineage_GJ2] 
   @SponsorID=N&apos;${sID}&apos;
  ,@ShowPC=N&apos;${sShowPC}&apos;
  ,@ShowNonEC=N&apos;${sNonEC}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="02 - Usp_CachedGracesCurrentPeriod_Load" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @ScheduleID int
DECLARE @Name nvarchar(100)

-- TODO: Set parameter values here.

EXECUTE @RC = [Commissions_Pulse].[pulse].[Usp_CachedGracesCurrentPeriod_Load] 
 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname=" Usp_PulseVitalSigns" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @ScheduleID int
DECLARE @Name nvarchar(100)

-- TODO: Set parameter values here.

EXECUTE @RC = [Commissions].[pulse].[rptVitalSigns] 
	@AccountID = N&apos;${sAcctID}&apos;,
	@PeriodId = 201607,
	@Page = 1,
	@Pagesize = 20,
	@StatesList = &apos;&apos;,  
	@CountryList = &apos;US,CA&apos;,
	@TotalCount = 1800

  
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">iCount</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="03 - Usp_CachedTitlesLatestPeriod_Load" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int
DECLARE @ScheduleID int
DECLARE @Name nvarchar(100)

-- TODO: Set parameter values here.

EXECUTE @RC = [Commissions_Pulse].[pulse].[Usp_CachedTitlesLatestPeriod_Load] 
  
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="rptPulseAutoshipCRP - INFR-77" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int


-- TODO: Set parameter values here.

EXECUTE @RC = [Commissions].[pulse].[rptPulseAutoshipCRP] 
	@AccountID=N&apos;${AccountID}&apos;,
	@CountryList=null,
	@PeriodID=N&apos;${PeriodID}&apos;,
	@Name=null,
	@EnrollmentDateFrom=NULL,
	@EnrollmentDateTo=NULL,
	@LevelFrom=1,
	@LevelTo=4,
	@CRPQVFrom=null,
	@CRPQVTo=null,
	@PSQVFrom=null,
	@PSQVTo=null,
	@SVFrom=null,
	@SVTo=null,
	@CRPDateDayOfMonth=null,
	@CRPStatus=null,
	@Page=1,
	@PageSize=N&apos;${PageSize}&apos;,
	@SortByDirection=null,
	@TotalCount=null


  
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="rptPulseAutoshipPC - INFR-79" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">declare @p17 int
set @p17=NULL
exec [Commissions].[pulse].[rptAutoshipPC]
@AccountID=N&apos;${AccountID}&apos;, 
@CountryList=NULL,
@PeriodID=N&apos;${PeriodID}&apos;, 
@Name=NULL,
@EnrollmentDateFrom=NULL,
@EnrollmentDateTo=NULL,
@LevelFrom=1,
@LevelTo=4,
@SponsorName=NULL,
@PCQVFrom=NULL,
@PCQVTo=NULL,
@PCStatus=NULL,
@Page=1,
@PageSize=N&apos;${PageSize}&apos;, 
@SortByField=NULL,
@SortByDirection=1,
@TotalCount=@p17 output


  
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="rptkpiinfo - INFR-81" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">declare @p17 int
set @p17=NULL
exec [Commissions].[pulse].[rptkpiinfo] 
@PeriodId_IN=N&apos;${PeriodID}&apos;,
 @AccountID_IN=N&apos;${AccountID}&apos;



  
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="rptorderhistory - INFR-83" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int


-- TODO: Set parameter values here.

EXECUTE @RC = [Commissions].[pulse].[rptOrderHistory] 
	@AccountID=N&apos;${AccountID}&apos;,
	@PeriodID=N&apos;${PeriodID}&apos;,
	@PageSize=N&apos;${PageSize}&apos;,
	@Page=1,
	@SortByField=NULL,
	@SortByDirection=NULL,
	@Name=NULL,
	@OrderType=NULL,
	@CountryCode=NULL,
	@DateFrom=NULL,
	@DateTo=NULL,
	@SVFrom=NULL,
	@SVTo=NULL,
	@PSQVFrom=NULL,
	@PSQVTo=NULL,
	@TotalCount=NULL

  
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="rptOrdersView - INFR-113" enabled="true">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">declare @p17 int
set @p17=NULL
exec [Commissions].[pulse].[rptOrdersView] 

 @SponsorId=N&apos;${AccountID}&apos;
,@PeriodId=N&apos;${PeriodID}&apos;


  
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Security Stored Procs Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470160739000</longProp>
        <longProp name="ThreadGroup.end_time">1470160739000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Security.USP_Security_Select_Token - INFR-85" enabled="false">
          <stringProp name="dataSource">stageDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">DECLARE @RC int


-- TODO: Set parameter values here.

EXECUTE @RC = [RodanandFieldsLive].[security].[usp_security_select_token] 
	@TokenID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
